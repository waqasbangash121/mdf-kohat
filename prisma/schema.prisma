
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core entities with simplified relationships
model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String   // Hashed password
  name      String?
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Cattle {
  id          String   @id @default(cuid())
  name        String
  type        String   // Bull, Cow, Buffalo, etc.
  age         Int
  purchasePrice Int
  marketPrice   Int?     // Current market value of the cattle (optional)
  purchaseDate  DateTime
  status      CattleStatus @default(active)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations - cattle can be involved in transactions
  transactions Transaction[]

  @@map("cattle")
}

model Staff {
  id           String      @id @default(cuid())
  name         String
  cnic         String      @unique
  phone        String
  salary       Int
  dateOfHiring DateTime
  status       StaffStatus @default(active)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations - staff can receive salary payments
  transactions Transaction[]

  @@map("staff")
}

model Transaction {
  id          String          @id @default(cuid())
  name        String          // Description of transaction
  type        TransactionType // income or expense
  category    String          // sell_cattle, milk_sales, cattle_food, staff_salary, etc.
  amount      Int             // Amount in paisa (to avoid decimal issues)
  date        DateTime
  
  // Additional details for specific transaction types
  details     Json?           // Store flexible data like {litres: 50, pricePerLitre: 100, session: "morning"}
  
  // Optional relationships
  cattleId    String?
  cattle      Cattle?         @relation(fields: [cattleId], references: [id])
  staffId     String?
  staff       Staff?          @relation(fields: [staffId], references: [id])
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("transactions")
}

// Simplified enums
enum TransactionType {
  income
  expense
}

enum CattleStatus {
  active
  sold
  deceased
}

enum StaffStatus {
  active
  terminated
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}
